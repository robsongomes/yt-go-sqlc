// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package blog

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
	"github.com/robsongomes/yt-go-sqlc/types"
)

const countPosts = `-- name: CountPosts :one
SELECT count(*) FROM posts
`

func (q *Queries) CountPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPostsByAuthor = `-- name: CountPostsByAuthor :many
SELECT count(*), author from posts
WHERE author is not null
GROUP BY author
`

type CountPostsByAuthorRow struct {
	Count  int64          `db:"count" json:"count"`
	Author sql.NullString `db:"author" json:"author"`
}

func (q *Queries) CountPostsByAuthor(ctx context.Context) ([]CountPostsByAuthorRow, error) {
	rows, err := q.db.QueryContext(ctx, countPostsByAuthor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountPostsByAuthorRow
	for rows.Next() {
		var i CountPostsByAuthorRow
		if err := rows.Scan(&i.Count, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (title, content, slug, author)
VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	Title    types.MyString `db:"title" json:"title"`
	Conteudo types.MyString `db:"content" json:"content"`
	Slug     types.MyString `db:"slug" json:"slug"`
	Author   sql.NullString `db:"author" json:"author"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.Conteudo,
		arg.Slug,
		arg.Author,
	)
	return err
}

const createPostAndReturnPost = `-- name: CreatePostAndReturnPost :one
INSERT INTO posts (title, content, slug, author)
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, slug, author
`

type CreatePostAndReturnPostParams struct {
	Title    types.MyString `db:"title" json:"title"`
	Conteudo types.MyString `db:"content" json:"content"`
	Slug     types.MyString `db:"slug" json:"slug"`
	Author   sql.NullString `db:"author" json:"author"`
}

func (q *Queries) CreatePostAndReturnPost(ctx context.Context, arg CreatePostAndReturnPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPostAndReturnPost,
		arg.Title,
		arg.Conteudo,
		arg.Slug,
		arg.Author,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Conteudo,
		&i.Slug,
		&i.Author,
	)
	return i, err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePostById, id)
	return err
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, content, slug, author FROM posts
WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Conteudo,
		&i.Slug,
		&i.Author,
	)
	return i, err
}

const getPostsAuthors = `-- name: GetPostsAuthors :many
SELECT author FROM posts
`

func (q *Queries) GetPostsAuthors(ctx context.Context) ([]sql.NullString, error) {
	rows, err := q.db.QueryContext(ctx, getPostsAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []sql.NullString
	for rows.Next() {
		var author sql.NullString
		if err := rows.Scan(&author); err != nil {
			return nil, err
		}
		items = append(items, author)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByIds = `-- name: GetPostsByIds :many
SELECT id, title, content, slug, author FROM posts
WHERE id = ANY($1::int[])
`

func (q *Queries) GetPostsByIds(ctx context.Context, postIds []int32) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByIds, pq.Array(postIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Conteudo,
			&i.Slug,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsInfo = `-- name: GetPostsInfo :many
SELECT title, author FROM posts
`

type GetPostsInfoRow struct {
	Title  types.MyString `db:"title" json:"title"`
	Author sql.NullString `db:"author" json:"author"`
}

func (q *Queries) GetPostsInfo(ctx context.Context) ([]GetPostsInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsInfo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsInfoRow
	for rows.Next() {
		var i GetPostsInfoRow
		if err := rows.Scan(&i.Title, &i.Author); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsTitle = `-- name: GetPostsTitle :many
SELECT title FROM posts
`

func (q *Queries) GetPostsTitle(ctx context.Context) ([]types.MyString, error) {
	rows, err := q.db.QueryContext(ctx, getPostsTitle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []types.MyString
	for rows.Next() {
		var title types.MyString
		if err := rows.Scan(&title); err != nil {
			return nil, err
		}
		items = append(items, title)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsViews = `-- name: GetPostsViews :many
SELECT posts.id, posts.title, posts.content, posts.slug, posts.author, posts_views.post_id, posts_views.views FROM posts
JOIN posts_views ON posts_views.post_id = posts.id
`

type GetPostsViewsRow struct {
	Post      Post      `db:"post" json:"post"`
	PostsView PostsView `db:"posts_view" json:"posts_view"`
}

func (q *Queries) GetPostsViews(ctx context.Context) ([]GetPostsViewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsViews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsViewsRow
	for rows.Next() {
		var i GetPostsViewsRow
		if err := rows.Scan(
			&i.Post.ID,
			&i.Post.Title,
			&i.Post.Conteudo,
			&i.Post.Slug,
			&i.Post.Author,
			&i.PostsView.PostID,
			&i.PostsView.Views,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, slug, author FROM posts
ORDER BY title DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Conteudo,
			&i.Slug,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setPostViews = `-- name: SetPostViews :exec
UPDATE posts_views set views = views + 1 WHERE post_id = $1
`

// INSERT INTO posts_views (post_id, views) VALUES ($1, 1)
// ON CONFLICT(post_id) DO UPDATE SET views = EXCLUDED.views + 1;
func (q *Queries) SetPostViews(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, setPostViews, postID)
	return err
}

const updateContentOrAuthor = `-- name: UpdateContentOrAuthor :one
UPDATE posts
SET
   content = coalesce($1, content),
   author  = coalesce($2, author)
WHERE id = $3
RETURNING id, title, content, slug, author
`

type UpdateContentOrAuthorParams struct {
	Conteudo sql.NullString `db:"content" json:"content"`
	Author   sql.NullString `db:"author" json:"author"`
	ID       int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateContentOrAuthor(ctx context.Context, arg UpdateContentOrAuthorParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updateContentOrAuthor, arg.Conteudo, arg.Author, arg.ID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Conteudo,
		&i.Slug,
		&i.Author,
	)
	return i, err
}

const updatePostAuthor = `-- name: UpdatePostAuthor :exec
UPDATE posts SET author = $1
`

func (q *Queries) UpdatePostAuthor(ctx context.Context, author sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updatePostAuthor, author)
	return err
}

const updatePostAuthorById = `-- name: UpdatePostAuthorById :exec

UPDATE posts SET author = $1 WHERE id = $2
`

type UpdatePostAuthorByIdParams struct {
	Author sql.NullString `db:"author" json:"author"`
	ID     int64          `db:"id" json:"id"`
}

// WARNING: NO WHERE
func (q *Queries) UpdatePostAuthorById(ctx context.Context, arg UpdatePostAuthorByIdParams) error {
	_, err := q.db.ExecContext(ctx, updatePostAuthorById, arg.Author, arg.ID)
	return err
}
