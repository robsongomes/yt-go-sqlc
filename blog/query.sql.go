// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package blog

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (title, content, slug, author)
VALUES ($1, $2, $3, $4)
`

type CreatePostParams struct {
	Title   string
	Content string
	Slug    string
	Author  sql.NullString
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Title,
		arg.Content,
		arg.Slug,
		arg.Author,
	)
	return err
}

const createPostAndReturnPost = `-- name: CreatePostAndReturnPost :one
INSERT INTO posts (title, content, slug, author)
VALUES ($1, $2, $3, $4)
RETURNING id, title, content, slug, author
`

type CreatePostAndReturnPostParams struct {
	Title   string
	Content string
	Slug    string
	Author  sql.NullString
}

func (q *Queries) CreatePostAndReturnPost(ctx context.Context, arg CreatePostAndReturnPostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPostAndReturnPost,
		arg.Title,
		arg.Content,
		arg.Slug,
		arg.Author,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Slug,
		&i.Author,
	)
	return i, err
}

const deletePostById = `-- name: DeletePostById :exec
DELETE FROM posts WHERE id = $1
`

func (q *Queries) DeletePostById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePostById, id)
	return err
}

const listPosts = `-- name: ListPosts :many
SELECT id, title, content, slug, author FROM posts
ORDER BY title DESC
`

func (q *Queries) ListPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Slug,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostAuthor = `-- name: UpdatePostAuthor :exec
UPDATE posts SET author = $1
`

func (q *Queries) UpdatePostAuthor(ctx context.Context, author sql.NullString) error {
	_, err := q.db.ExecContext(ctx, updatePostAuthor, author)
	return err
}

const updatePostAuthorById = `-- name: UpdatePostAuthorById :exec

UPDATE posts SET author = $1 WHERE id = $2
`

type UpdatePostAuthorByIdParams struct {
	Author sql.NullString
	ID     int64
}

// WARNING: NO WHERE
func (q *Queries) UpdatePostAuthorById(ctx context.Context, arg UpdatePostAuthorByIdParams) error {
	_, err := q.db.ExecContext(ctx, updatePostAuthorById, arg.Author, arg.ID)
	return err
}
